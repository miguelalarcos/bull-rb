Bull-rb
=======

Ruby full stack for real time web apps:
---------------------------------------

Ruby + Opal + React.rb + EventMachine + Rethinkdb


This is a Meteor like framework, but with Ruby language. (Other example is Volt.)

From client side you can ask the server in two ways:

* rpc (returns a promise)
    examples:
    $controller.rpc('add', 3, 4).then do |response| ... end

    other example:
    $controller.rpc('login', user, password)

* watch
    example: $controller.watch('cars_of_color', 'red')
    the server will notify the client if:
    * a new red car is created
    * a red car change
    * a red car change the color

The serve will send to the client a return message in the first case or data messages because of a watch request.
Behind the scenes: a ticket (integer) is sent with each request and send back to client, so the client knows who
notify with the data received.

Forms:
------

The framework comes with a Form class:

```ruby
class MyForm < Form
    @@table = 'car'
    param :selected # an instance of RVar (see later).

    before_mount do
        reactive(params.selected) do
            get params.selected.value
            # behind the scenes it makes a $controller.rpc('get', @@table, params.selected.value)
            # and sets the values of the object returned in the state
        end
    end

    def clear
        state.registration! ''
        state.color! ''
        state.wheels! 0
        state.date! nil
        state.id! nil
    end

    def render
        ValidateCar.new.validate state
        div do
            StringInput(change_attr: change_attr('registration'), value: state.registration)
            span{'not valid registration'} if !state.is_valid_registration
            IntegerInput(key: 'my_key', change_attr: change_attr('wheels'), value: state.wheels)
            DateTimeInput(change_date: change_attr('date'), format: '%d-%m-%Y %H:%M', value: state.date, time: true)
            button(type: :button) { 'save' }.on(:click) {save} if state.is_valid
            button(type: :button) { 'clear' }.on(:click) {clear}
        end
    end
end

```

RVar
----
You can have reactive vars, and use like this:

```ruby
v = RVar.new 0

reactive(v) do  # whenever the value changes, the block is executed
    puts v.value
end

v.value = 8
# 8
```

Other example, in App before_mount:
```ruby
@language = RVar.new 'es'
reactive(@language) do
    $controller.rpc('get', 'i18n', @language.value).then do|response|
        state.i18n_map! response
    end
end
```

And in render method:

```ruby
def render
    Menu(...)
    PageA(car_selected: @car_selected)
    PageB(car_selected: @car_selected)
```

This way several components can watch the rvar and set a value to it. For example a form is editing the rvar
car_selected, and a list component of cars can set the car_selected to another id when clicking in one car.

The canonical way of writing a custom component:
------------------------------------------------

```ruby
class DisplayCar < React::Component::Base
    @@table = 'car'
    param :selected

    before_mount do
        @predicate_id = nil
        reactive(params.selected) do
            watch_ params.selected.value
        end
    end

    def clear
        state.registration! ''
        state.color! ''
    end

    def render
        div do
            {state.registration + ' color: ' + state.color}
        end
    end

    def watch_ value
      clear
      $controller.stop_watch(@predicate_id) if @predicate_id != nil
      @predicate_id = $controller.watch('by_id', @@table, value) do |data|
        data['new_val'].each {|k, v| state.__send__(k+'!', v)}
      end
    end

    before_unmount do
      $controller.stop_watch @predicate_id if @predicate_id != nil
    end
end
```

And this is a simplified way of doing the same:

```ruby
class DisplayCar < DisplayDoc
    @@table = 'car'
    param :selected

    before_mount do
        reactive(params.selected) do
            watch_ params.selected.value
        end
    end

    def clear
        state.registration! ''
        state.color! ''
    end

    def render
        div do
            {state.registration + ' color: ' + state.color}
        end
    end
end
```

See client/ui.rb for more details.

Instructions to install and execute:
------------------------------------
* You have to install Ruby and Rethinkdb.
* Gemfile in client folder
* Gemfile in server folder
* Console in client folder:
    $ rake css
    $ rake development
* Console in client folder:
    $ python -m SimpleHTTPServer
* Console in root folder:
    $ rethinkdb &
    $ ruby setup_data_base.rb
* Console in server side:
    $ ruby start.rb
* Open browser in localhost:8000
